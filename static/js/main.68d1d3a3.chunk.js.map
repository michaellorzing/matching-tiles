{"version":3,"sources":["components/card.js","components/Navbar.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["imgStyle","padding","Card","props","handleClick","id","react_default","a","createElement","className","style","value","onClick","alt","name","src","image","navStyle","color","Navbar","currentScore","topScore","wrapperStyle","display","flexDirecton","flexWrap","border","justifyContent","Wrapper","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffleCards","setState","cardsList","shuffle","state","pushPick","selected","indexOf","concat","handleScore","alert","score","cards","handleClickEvent","bind","assertThisInitialized","_this2","_this$state","console","log","Fragment","components_Navbar","Container","fluid","containerStyle","components_Wrapper","map","card","components_card","key","React","Component","background","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68d1d3a3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Card(props) {\r\n  const { handleClick, id } = props\r\n  return (\r\n    <div className=\"card\" style={imgStyle} value={id}>\r\n      {/* {console.log(id)} */}\r\n      <div className=\"img-container\">\r\n        <img \r\n        onClick={() => handleClick(id)}\r\n        alt={props.name} \r\n        src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst imgStyle ={\r\n  padding: 0\r\n}\r\nexport default Card;","import React from 'react';\r\n\r\nfunction Navbar(props) {\r\n  const { currentScore, topScore } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-dark sticky-top w-100 text-justify-left\" style={navStyle}>\r\n    <span className=\"navbar-brand\" style={navStyle}>React: The Gathering</span>\r\n      <ul className=\"navbar-nav text-justify-right\">\r\n        <li className=\"nav-item\">\r\n          <span>Current Score: {currentScore} </span>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <span> High Score: {topScore} </span>\r\n        </li>\r\n      </ul>\r\n     </nav> \r\n  )\r\n}\r\n\r\n\r\nconst navStyle = {\r\n  color: 'white'\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\n\r\n\r\nfunction Wrapper(props) {\r\n  return <div style={wrapperStyle}>\r\n    {props.children}\r\n  </div>;\r\n}\r\n\r\n\r\nconst wrapperStyle = {\r\n  display: 'flex',\r\n  flexDirecton: 'row',\r\n  flexWrap: 'wrap',\r\n  padding: '20px',\r\n  border: '1px solid grey',\r\n  justifyContent: 'center'\r\n}\r\n\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport shuffle from 'lodash/shuffle';\r\nimport Card from './components/card';\r\nimport Navbar from './components/Navbar';\r\nimport Wrapper from './components/Wrapper';\r\nimport cards from './cards.json';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      cardsList: cards,\r\n      score: 0,\r\n      topScore: 0,\r\n      selected: []\r\n    };\r\n    this.handleClickEvent = this.handleClickEvent.bind(this)\r\n  };\r\n\r\n\r\n  handleClickEvent(id) {\r\n    this.shuffleCards()\r\n    this.handleScore()\r\n    this.pushPick(id)\r\n  }\r\n\r\n  shuffleCards = () => {\r\n    this.setState({\r\n      cardsList: shuffle(this.state.cardsList)\r\n    })\r\n\r\n  }\r\n\r\n  pushPick = id => {\r\n    if (this.state.selected.indexOf(id) === -1) {\r\n      this.setState({\r\n        selected: this.state.selected.concat(id)\r\n      })\r\n      this.handleScore()\r\n    } else {\r\n      alert(\"You've already selected that card!\")\r\n      this.setState({\r\n        score: 0,\r\n        topScore: 0,\r\n        selected: []\r\n      })\r\n    }\r\n  };\r\n\r\n  handleScore = () => {\r\n    const currentScore = this.state.score + 1\r\n    this.setState({\r\n      score: currentScore\r\n    })\r\n    if (currentScore >= this.state.topScore){\r\n      this.setState({\r\n        topScore: currentScore\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { cardsList, score, topScore } = this.state\r\n    // console.log(this.state.cardsList.id)\r\n    console.log(this.state)\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar currentScore={score} topScore={topScore}/>\r\n        <Container fluid style={containerStyle}>\r\n          <Wrapper>\r\n            {\r\n              cardsList.map(card => {\r\n                // console.log(card)\r\n                return (\r\n                  <Card\r\n                    key={card.id}\r\n                    name={card.name}\r\n                    image={card.image}\r\n                    id={card.id}\r\n                    handleClick={this.handleClickEvent}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </Wrapper>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n};\r\n\r\nconst containerStyle = {\r\n  background: 'grey'\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}